'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = replicate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _selectKeys = require('./selectKeys');

var _selectKeys2 = _interopRequireDefault(_selectKeys);

var _mergeStoresStates = require('./mergeStoresStates');

var _mergeStoresStates2 = _interopRequireDefault(_mergeStoresStates);

exports.selectKeys = _selectKeys2['default'];
exports.mergeStoresStates = _mergeStoresStates2['default'];

/**
 * Store enhancer designed to replicate stores' states before/after reductions.
 *
 * @param {Mixed} storeKey
 * @param {Object|Array} replicatorCreator(s)
 * @return {Function}
 * @api public
 */

function replicate(storeKey, replicatorCreators) {
  if (!Array.isArray(replicatorCreators)) {
    replicatorCreators = [replicatorCreators];
  }

  return function (next) {
    return function (reducer, initialState, enhancer) {
      var nextState = null;
      var replaceState = false;
      var mergeNextState = function mergeNextState(state) {
        if (!replaceState && state && typeof state === 'object' && nextState && typeof nextState === 'object' && !Array.isArray(state) && !Array.isArray(nextState)) {
          state = _extends({}, state, nextState);
        } else {
          state = nextState;
        }

        replaceState = false;
        nextState = null;
        return state;
      };

      var replicators = replicatorCreators.map(function (replicator) {
        return replicator();
      });
      var replicatedReducer = function replicatedReducer(state, action) {
        for (var _iterator = replicators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var replicator = _ref;

          if (replicator.ready && replicator.preReduction) {
            replicator.preReduction(storeKey, _selectKeys2['default'](replicator.keys, state), action);
          }
        }

        if (nextState) {
          state = mergeNextState(state);
        }
        state = reducer(state, action);

        for (var _iterator2 = replicators, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var replicator = _ref2;

          if (replicator.ready && replicator.postReduction) {
            replicator.postReduction(storeKey, _selectKeys2['default'](replicator.keys, state), action);
          }
        }

        return state;
      };

      var store = next(replicatedReducer, initialState, enhancer);
      var initReplicators = function initReplicators() {
        var _loop = function () {
          if (_isArray3) {
            if (_i3 >= _iterator3.length) return 'break';
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) return 'break';
            _ref3 = _i3.value;
          }

          var replicator = _ref3;

          if (replicator.init) {
            replicator.ready = false;
            replicator.init(storeKey, store, function (ready) {
              return replicator.ready = ready;
            });
          } else {
            replicator.ready = true;
          }
        };

        for (var _iterator3 = replicators, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          var _ret = _loop();

          if (_ret === 'break') break;
        }
      };

      store.setKey = function (key) {
        if (key !== storeKey) {
          storeKey = key;
          replaceState = true;
          initReplicators();
        }
      };

      store.setState = function (state) {
        nextState = state;
        store.replaceReducer(replicatedReducer);
      };

      initReplicators();

      return store;
    };
  };
}